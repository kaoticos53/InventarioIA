@page "/reset-password"
@using MudBlazor
@using Inventario.Web.Models
@using Inventario.Web.Services.Interfaces
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject ILogger<ResetPassword> Logger

<PageTitle>Restablecer contraseña - Sistema de Inventario</PageTitle>

<MudThemeProvider Theme="_resetPasswordTheme" IsDarkMode="true" />

<div class="reset-password-container">
    <MudPaper Class="reset-password-paper" Elevation="10">
        <div class="reset-password-content">
            <!-- Logo y título -->
            <div class="reset-password-logo">
                <MudAvatar Size="Size.Large" Class="mx-auto mb-3" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%);">
                    <MudIcon Icon="@Icons.Material.Filled.LockReset" Size="Size.Large" Color="Color.Surface" />
                </MudAvatar>
                <MudText Typo="Typo.h4" Class="text-center mb-1" Style="font-weight: 600;">Restablecer contraseña</MudText>
                <MudText Class="text-center mb-4" Style="color: var(--mud-palette-text-secondary);">
                    Ingresa tu nueva contraseña
                </MudText>
            </div>

            @if (_showSuccessMessage)
            {
                <MudAlert Severity="Severity.Success" Class="mb-4">
                    <MudText>@_successMessage</MudText>
                    <MudText Class="mt-2">Ahora puedes iniciar sesión con tu nueva contraseña.</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Class="mt-2" OnClick="@(e => Navigation.NavigateTo("/login"))">
                        Ir al inicio de sesión
                    </MudButton>
                </MudAlert>
            }
            else if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">
                    <MudText>@_errorMessage</MudText>
                </MudAlert>
            }

            @if (!_showSuccessMessage)
            {
                <!-- Formulario de restablecimiento de contraseña -->
                <MudForm @ref="_form" @bind-IsValid="_isFormValid" ValidationDelay="0" Class="reset-password-form">
                    <!-- Campos ocultos -->
                    <div style="display: none;">
                        <MudTextField @bind-Value="_resetModel.Token" />
                        <MudTextField @bind-Value="_resetModel.Email" />
                    </div>
                    
                    <MudTextField 
                        @bind-Value="_resetModel.NewPassword"
                        Label="Nueva contraseña"
                        For="() => _resetModel.NewPassword"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        Adornment="Adornment.End"
                        AdornmentIcon="@_passwordInputIcon"
                        AdornmentAriaLabel="Mostrar/ocultar contraseña"
                        InputType="@_passwordInput"
                        Class="form-field"
                        Required="true"
                        Immediate="true" />
                    
                    <MudTextField 
                        @bind-Value="_resetModel.ConfirmPassword"
                        Label="Confirmar nueva contraseña"
                        For="() => _resetModel.ConfirmPassword"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        Adornment="Adornment.End"
                        AdornmentIcon="@_confirmPasswordInputIcon"
                        AdornmentAriaLabel="Mostrar/ocultar contraseña"
                        InputType="@_confirmPasswordInput"
                        Class="form-field"
                        Required="true"
                        Immediate="true" />
                    
                    <!-- Componente PasswordStrengthMeter eliminado -->
                    
                    <MudButton 
                        Variant="Variant.Filled" 
                        Color="Color.Primary" 
                        FullWidth="true" 
                        ButtonType="ButtonType.Submit"
                        Class="@($"mt-2 mb-3 reset-password-button {(_isLoading ? "loading" : "")}")"
                        @onclick="HandleResetPassword"
                        Disabled="@(!_isFormValid || _isLoading)">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Color="Color.Surface" Size="Size.Small" Class="mr-2" />
                        }
                        Restablecer contraseña
                    </MudButton>
                    
                    <div class="text-center mt-4">
                        <MudText Class="text-caption">
                            ¿Recordaste tu contraseña? 
                            <MudLink Href="/login" Class="font-weight-bold">Iniciar sesión</MudLink>
                        </MudText>
                    </div>
                </MudForm>
            }
        </div>
        
        <!-- Lado derecho con imagen -->
        <div class="reset-password-sidebar">
            <div class="reset-password-overlay"></div>
            <div class="reset-password-sidebar-content">
                <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Large" Class="mb-4" Style="font-size: 4rem;" />
                <MudText Typo="Typo.h4" Class="mb-2">Seguridad primero</MudText>
                <MudText Class="mb-6">Protege tu cuenta con una contraseña segura</MudText>
                <MudDivider Light="true" Class="my-4" />
                <MudText Class="text-caption">© @DateTime.Now.Year Todos los derechos reservados</MudText>
            </div>
        </div>
    </MudPaper>
</div>

<!-- Componente de fortaleza de contraseña -->
<div class="password-strength-meter @_passwordStrengthClass">
    <div class="password-strength-meter-bar" style="width: @(_passwordStrength * 100)%;"></div>
</div>

<style>
    .reset-password-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: var(--mud-palette-background);
        padding: 1rem;
        background-image: linear-gradient(135deg, var(--mud-palette-dark) 0%, var(--mud-palette-surface) 100%);
    }
    
    .reset-password-paper {
        display: flex;
        width: 100%;
        max-width: 1000px;
        border-radius: 16px;
        overflow: hidden;
        min-height: 650px;
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.36);
        backdrop-filter: blur(10px);
        background-color: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-lines-inputs);
    }
    
    .reset-password-content {
        flex: 1;
        padding: 3rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        max-width: 500px;
        margin: 0 auto;
    }
    
    .reset-password-sidebar {
        flex: 1;
        background-image: url('https://source.unsplash.com/random/800x600/?security,lock,password');
        background-size: cover;
        background-position: center;
        position: relative;
        display: none;
    }
    
    .reset-password-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(126, 111, 255, 0.9) 0%, rgba(255, 128, 171, 0.9) 100%);
        opacity: 0.95;
    }
    
    .reset-password-sidebar-content {
        position: relative;
        z-index: 1;
        color: white;
        padding: 3rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
    }
    
    .reset-password-logo {
        margin-bottom: 2.5rem;
        text-align: center;
    }
    
    .reset-password-form {
        width: 100%;
    }
    
    .form-field {
        margin-bottom: 1.5rem;
    }
    
    .reset-password-button {
        height: 48px;
        font-weight: 600;
        letter-spacing: 0.5px;
        text-transform: uppercase;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .reset-password-button:not(:disabled):hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(126, 111, 255, 0.3);
    }
    
    .reset-password-button:disabled {
        background-color: var(--mud-palette-action-disabled);
        color: var(--mud-palette-text-disabled);
    }
    
    .reset-password-button.loading {
        opacity: 0.8;
        cursor: progress;
    }
    
    /* Estilos para el medidor de fortaleza de contraseña */
    .password-strength-meter {
        height: 4px;
        background-color: #e0e0e0;
        border-radius: 2px;
        margin: 8px 0 16px;
        overflow: hidden;
    }
    
    .password-strength-meter-bar {
        height: 100%;
        transition: width 0.3s ease, background-color 0.3s ease;
    }
    
    .password-strength-weak .password-strength-meter-bar {
        background-color: #f44336; /* Rojo */
    }
    
    .password-strength-fair .password-strength-meter-bar {
        background-color: #ff9800; /* Naranja */
    }
    
    .password-strength-good .password-strength-meter-bar {
        background-color: #2196f3; /* Azul */
    }
    
    .password-strength-strong .password-strength-meter-bar {
        background-color: #4caf50; /* Verde */
    }
    
    .password-strength-feedback {
        font-size: 0.75rem;
        margin-top: 4px;
        color: var(--mud-palette-text-secondary);
    }
    
    @@media (min-width: 960px) {
        .reset-password-sidebar {
            display: block;
        }
    }
    
    @@media (max-width: 599px) {
        .reset-password-container {
            padding: 0;
        }
        
        .reset-password-paper {
            border-radius: 0;
            height: 100vh;
            max-width: 100%;
        }
        
        .reset-password-content {
            padding: 2rem 1.5rem;
        }
    }
</style>

@code {
    private MudForm _form;
    private bool _isFormValid = false;
    private Dictionary<string, string> _formErrors = new();
    private bool _isLoading = false;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private bool _showSuccessMessage = false;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private InputType _passwordInput = InputType.Password;
    private InputType _confirmPasswordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string _confirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private double _passwordStrength = 0;
    private string _passwordStrengthClass = "password-strength-weak";
    private string _passwordFeedback = "";
    
    private ResetPasswordModel _resetModel = new();
    
    private MudTheme _resetPasswordTheme = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener el token y el correo electrónico de la URL
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            var token = query["token"];
            var email = query["email"];
            
            if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(email))
            {
                _errorMessage = "Enlace de restablecimiento de contraseña no válido o caducado.";
                return;
            }
            
            _resetModel.Token = token;
            _resetModel.Email = email;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al inicializar la página de restablecimiento de contraseña");
            _errorMessage = "Error al procesar la solicitud. Por favor, inténtalo de nuevo.";
        }
    }

    private async Task HandleResetPassword()
    {
        try
        {
            _isLoading = true;
            _errorMessage = string.Empty;
            
            // Validar el formulario
            await _form.Validate();
            if (!_isFormValid)
            {
                _isLoading = false;
                return;
            }

            // Validar que las contraseñas coincidan
            if (_resetModel.NewPassword != _resetModel.ConfirmPassword)
            {
                _errorMessage = "Las contraseñas no coinciden.";
                _isLoading = false;
                return;
            }

            // Validar fortaleza de la contraseña
            if (_passwordStrength < 0.6) // Requerir al menos nivel "bueno"
            {
                _errorMessage = "La contraseña no cumple con los requisitos de seguridad.";
                _isLoading = false;
                return;
            }

            // Intentar restablecer la contraseña
            var result = await AuthService.ResetPasswordAsync(_resetModel);
            
            if (result.IsSuccess)
            {
                _successMessage = result.Message ?? "Tu contraseña ha sido restablecida correctamente.";
                _showSuccessMessage = true;
                Snackbar.Add(_successMessage, Severity.Success);
            }
            else
            {
                _errorMessage = result.Message ?? "Error al restablecer la contraseña. Por favor, inténtalo de nuevo.";
                Snackbar.Add(_errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Ocurrió un error al procesar tu solicitud. Por favor, inténtalo de nuevo más tarde.";
            Logger.LogError(ex, "Error al restablecer la contraseña");
            Snackbar.Add(_errorMessage, Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
        _passwordInput = _showPassword ? InputType.Text : InputType.Password;
        _passwordInputIcon = _showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
    
    private void ToggleConfirmPasswordVisibility()
    {
        _showConfirmPassword = !_showConfirmPassword;
        _confirmPasswordInput = _showConfirmPassword ? InputType.Text : InputType.Password;
        _confirmPasswordInputIcon = _showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private void UpdatePasswordStrength(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            _passwordStrength = 0;
            _passwordStrengthClass = "password-strength-weak";
            _passwordFeedback = "";
            return;
        }

        int score = 0;
        var feedback = new System.Text.StringBuilder();
        
        // Longitud mínima
        if (password.Length >= 8) score++;
        
        // Contiene letras mayúsculas
        if (password.Any(char.IsUpper)) score++;
        
        // Contiene letras minúsculas
        if (password.Any(char.IsLower)) score++;
        
        // Contiene números
        if (password.Any(char.IsDigit)) score++;
        
        // Contiene caracteres especiales
        if (password.Any(c => !char.IsLetterOrDigit(c))) score++;
        
        // Longitud mayor a 12 caracteres
        if (password.Length >= 12) score++;
        
        // Calcular fortaleza (0-1)
        _passwordStrength = score / 6.0;
        
        // Establecer clase de fortaleza y retroalimentación
        if (_passwordStrength < 0.3)
        {
            _passwordStrengthClass = "password-strength-weak";
            _passwordFeedback = "Muy débil";
        }
        else if (_passwordStrength < 0.6)
        {
            _passwordStrengthClass = "password-strength-fair";
            _passwordFeedback = "Débil";
        }
        else if (_passwordStrength < 0.8)
        {
            _passwordStrengthClass = "password-strength-good";
            _passwordFeedback = "Buena";
        }
        else
        {
            _passwordStrengthClass = "password-strength-strong";
            _passwordFeedback = "Fuerte";
        }
        
        StateHasChanged();
    }
    
    private void OnPasswordChanged(ChangeEventArgs e)
    {
        _resetModel.NewPassword = e.Value?.ToString() ?? string.Empty;
        UpdatePasswordStrength(_resetModel.NewPassword);
    }
}

<!-- Componente de medidor de fortaleza de contraseña -->
@code {
    [Parameter]
    public string Password { get; set; } = string.Empty;
    
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }
    
    [Parameter]
    public string Class { get; set; } = string.Empty;
    
    private async Task OnPasswordInput(ChangeEventArgs e)
    {
        Password = e.Value?.ToString() ?? string.Empty;
        await PasswordChanged.InvokeAsync(Password);
    }
    
    private string GetPasswordStrengthClass(double strength)
    {
        if (strength < 0.3) return "password-strength-weak";
        if (strength < 0.6) return "password-strength-fair";
        if (strength < 0.8) return "password-strength-good";
        return "password-strength-strong";
    }
    
    private string GetPasswordStrengthText(double strength)
    {
        if (strength < 0.3) return "Muy débil";
        if (strength < 0.6) return "Débil";
        if (strength < 0.8) return "Buena";
        return "Fuerte";
    }
    
    private string GetPasswordStrengthColor(double strength)
    {
        if (strength < 0.3) return "#f44336"; // Rojo
        if (strength < 0.6) return "#ff9800"; // Naranja
        if (strength < 0.8) return "#2196f3"; // Azul
        return "#4caf50"; // Verde
    }
}
